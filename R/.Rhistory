" b = ", round( ests[paste0(a, "_", b,"_", s)][[1]][2], 2) ) )
#if (s == "U") {
#legend("topleft", bty = 'n', legend = leg, lty = 1:3, col = line_col[which(line_col_ind)], lwd = 2)}
} #if (ests)
}
leg
line_col_ind
legend("topleft", bty = 'n', legend = leg, lty = 1:3, col = line_col[which(line_col_ind)], lwd = 2)
legend("topleft", bty = 'n', legend = leg, lty = 1:3, col = line_col[which(line_col_ind)], lwd = 2)}
#' Create function to take data from multiple sources and create a
#' single data frame that can be used for biological comparisons acroos
#' data sources
#'
#' @param dir directory of where save save plots
#' @param data data frame created by the create_data_frame function
#' @param splits not implemented
#' @param nm_append text to append to the plot name
#' @param ests list of estimates created by the estimate_length_weight function
#'
#' @return Nothing - plots
#'
#' @author Chantel Wetzel
#' @export
#'
length_weight_plot <- function(dir, data, splits = NA, nm_append = NULL, ests = NULL){
dir.create(file.path(dir, "plots"), showWarnings = FALSE)
remove = NULL
# Determine if all data sources have lengths & weights
for (s in unique(data$Source)){
check_len  <- check <- sum( !is.na( data[data$Source == s, "Length"])) == 0
check_wght <- sum( !is.na( data[data$Source == s, "Weight"])) == 0
if (check_len | check_wght) {remove <- c(remove, s)}
}
data <- data[!data$Source %in% remove, ]
sources = unique(data$Source)
n = length(sources)
if (n == 1) { panels = c(1, 1)}
if (n == 2) { panels = c(3, 1)}
if (n == 3) { panels = c(2, 2)}
if (n == 4) { panels = c(3, 2)}
colors = rich.colors.short(n + 2, alpha = 0.4)
lens = 1:max(data$Length, na.rm = TRUE)
ymax = max(data$Weight, na.rm = TRUE)
xmax = max(data$Length, na.rm = TRUE)
file = ifelse(is.null(nm_append), "Length_Weight_by_Source.png",
paste0("Length_Weight_by_Source_", nm_append, ".png"))
pngfun(wd = file.path(dir, "plots"), file = file, w = 7, h = 7, pt = 12)
par(mfrow = c(panels[1], panels[2]))
if (n  != 1){
par(mfrow = c(panels[1] + 1, panels[2]))
plot(data$Length, data$Weight, xlab = "Length (cm)", ylab = "Weight (kg)", main = "All Data",
ylim = c(0, ymax), xlim = c(0, xmax), pch = 16, col = colors[1])
if (!is.null(ests) & "all" %in% names(ests)) {
lines(lens, ests$all[1] * lens ^ ests$all[2],col = 1, lwd = 2)
legend("topleft", bty = 'n',
legend = paste0("Combined: a = ", signif(ests$all[1], digits = 3), " b = ", round(ests$all[2], 2) ),
lty = 1, col = 1, lwd = 2)
vb_fn <- function(age, Linf, L0, k) {
#vec <- Linf * (1 - exp( -k * (age - t0)))
vec <- Linf - (Linf - L0) * exp(-age * k)
return(vec)
}
vb_fn(0:90, 43.04, 0.56, 0.199)
library(r4ss)
wd = "C:/Users/Brian.Langseth/Desktop/or"
model = "5_0_4_newageL1"
base.504 = SS_output(file.path(wd, model),covar=TRUE)
SS_plots(base.504)
model = "4_0_base"
base.400 = SS_output(file.path(wd, model),covar=TRUE)
model = "5_0_0_base"
base.500 = SS_output(file.path(wd, model),covar=TRUE)
model = "5_0_1_noblock"
base.501 = SS_output(file.path(wd, model),covar=TRUE)
model = "5_0_2_nodome"
base.502 = SS_output(file.path(wd, model),covar=TRUE)
model = "5_0_3_oldLA"
base.503 = SS_output(file.path(wd, model),covar=TRUE)
model = "5_0_4_newageL1"
base.504 = SS_output(file.path(wd, model),covar=TRUE)
model = "4_0_5_newLA"
base.405 = SS_output(file.path(wd, model),covar=TRUE)
modelnames <- c("base: block_dome", "noBlock", "noDome", "model400: block-asymp", "base: oldLA", "model400: newLA", "base:updateL1")
mysummary  <- SSsummarize(list(base.500, base.501, base.502, base.400, base.503, base.405, base.504))
SSplotComparisons(mysummary,
filenameprefix = "7_base_explore_",
legendlabels = modelnames,
plotdir = file.path(wd, "plots"),
pdf = TRUE)
model = "5_0_0_base"
base.500 = SS_output(file.path(wd, model),covar=TRUE)
SS_plots(base.500)
SS_tune_comps(dir = "C:\\Users\\Brian.Langseth\\Desktop\\or\\5_0_0_base", write = FALSE, option = "none") #for first initial pass
model = "4_0_5_newLA"
base.405 = SS_output(file.path(wd, model),covar=TRUE)
SS_plots(base.405)
model = "5_0_0_base"
base.500 = SS_output(file.path(wd, model),covar=TRUE)
SS_plots(base.500)
model = "5_0_0_base"
base.500 = SS_output(file.path(wd, model),covar=TRUE)
SS_plots(base.500)
model = "5_0_0_base"
base.500 = SS_output(file.path(wd, model),covar=TRUE)
SS_plots(base.500)
model = "5_0_0_base"
base.500 = SS_output(file.path(wd, model),covar=TRUE)
SS_plots(base.500)
model = "5_0_1_noblock"
base.501 = SS_output(file.path(wd, model),covar=TRUE)
SS_plots(base.501)
model = "5_0_2_nodome"
base.502 = SS_output(file.path(wd, model),covar=TRUE)
SS_plots(base.502)
SS_tune_comps(dir = "C:\\Users\\Brian.Langseth\\Desktop\\or\\5_0_1_noblock", write = FALSE, option = "none") #for first initial pass
SS_tune_comps(dir = "C:\\Users\\Brian.Langseth\\Desktop\\or\\5_0_2_nodome", write = FALSE, option = "none") #for first initial pass
model = "5_0_1_noblock"
base.501 = SS_output(file.path(wd, model),covar=TRUE)
SS_plots(base.501)
model = "5_0_2_nodome"
base.502 = SS_output(file.path(wd, model),covar=TRUE)
SS_plots(base.502)
model = "5_0_1_noblock"
base.501 = SS_output(file.path(wd, model),covar=TRUE)
SS_plots(base.501)
model = "5_0_2_nodome"
base.502 = SS_output(file.path(wd, model),covar=TRUE)
SS_plots(base.502)
model = "5_0_1_noblock"
base.501 = SS_output(file.path(wd, model),covar=TRUE)
SS_plots(base.501)
